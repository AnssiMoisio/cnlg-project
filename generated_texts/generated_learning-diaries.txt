-----
Learning diaries generated by GPT-2
-----
Model input:
------------------------------------------------------------------
Week 1:
We add to the discussion of how to assess the creativity of programs which generate artefacts such as poems, theorems, paintings, melodies, etc. To do so, we first review some existing frameworks for assessing artefact generation programs. Then, drawing on our experience of building both a mathematical discovery system and an automated painter, we argue that it is not appropriate to base the assessment of a system on its output alone, and that the way it produces artefacts also needs to be taken into account. We suggest a simple framework within which the behaviour of a program can be categorised and described which may add to the perception of creativity in the system.

Thoughts after the lecture on 9.9.2019:
On this lecture we discussed the creative tripod that is comprised of three requirements of creativity and three parties that can have these properties: appreciation, skill, imagination; programmer, computer, consumer.
In my initial definition of creativity, by purposefulness I meant somewhat similar properties that in the tripod are called appreciation. 
The tripod is more human-centric and narrower than my own definition. Evolution of species by natural selection does not comfortably qualify as creative by the standards of the tripod, but to me it seems the most self-evidently creative process, because it has created the most complex and meaningful products we know of.


Week 2:

Abstract Computational creativity is a flourishing research area, with a variety of creative systems being produced and developed. Creativity evaluation has not kept pace with system development with an evident lack of systematic evaluation of the creativity of these systems in the literature. This is partially due to dif?culties in de?ning what it means for a computer to be creative; indeed, there is no consensus on this for human creativity, let alone its computational equivalent. This paper proposes a Standardised Procedure for Evaluating Creative Systems (SPECS). SPECS is a three-step process: stating what it means for a particular computational system to be creative, deriving and performing tests based on these statements. To assist this process, the paper offers a collection of key components of creativity, identi?ed empirically from discussions of human and computational creativity. Using this approach, the SPECS methodology is demonstrated through a comparative case study evaluating computational creativity systems that improvise music.


Thoughts after the lecture on 16.9.2019: 
------------------------------------------------------------------
-----
sample 1:
-----


This lecture focused on the various different types of creativity and how their characteristics are different from one another. As such, it was not strictly focused on creative systems produced by humans. However, a few points were made which are common to all kinds of creativity and, therefore, useful in generalising, for example: (1) it is the goal of the SPECS process to evaluate a particular system in terms of its capabilities, rather than the technical features which make up what it means to be a creative system; (2) it is not enough to evaluate an artefact or system as being creative by itself. To be truly creative is to be highly skilled at producing it: by that, one would be making use of all the parts of the process. (3) in our modern, electronic society, technology has not only produced many highly capable artif-ics, it has also allowed the creation of systems that are both highly creative and more importantly extremely complicated. (4) what I call the 'creative tripod' has not remained identical over time, changing as the technology and creative processes have evolved and as these systems became increasingly specialized. This paper considers how these various characteristics and characteristics of the creative tripod can help guide and explain how these various creative systems work.

Advertisements<|endoftext|>


-----
sample 2:
-----


The main aim of the seminar series, to be held once a month starting on Tuesdays, is to provide research and teaching resources for graduate students of computational creativity. This research and teaching opportunities are offered in the form of webinars for research graduate students and undergraduate and postgraduate student projects, as well as in the form of tutorials for teaching. As many participants may already be working on computational creativity-related PhD research, but are keen to deepen their understanding of computational creativity, we have set up this webinars in conjunction with the Computer Creativity Conference [ https://www.cocart.net ; see the sidebar for further details]. A number of topics were discussed during the course of the webinars and some of these will be elaborated into future webinars (for example, in a course which will teach how to design and develop the computational style of a song using the methods presented in the webinar) This webinar series is supported by the research training system of the European CSIRO. Our support of the CSIRO CSIR Research Training System is ongoing as the research is developed and refined and to date there has been a total of nine webinars. The full-time training is available to both postgraduate and graduate students in the areas of Mathematics of Computation, Computational Creativity, Computing Creativity, and the Creativity of Computer and Electronic Music Systems, and all webinars are offered by the European Research Council under project ERC-634-2014-001 . However, if you have any interest in funding a webinar for a course which does not currently have a webinar then you can get in touch with the Research Training Systems department for further details on this subject. The course is now open to new researchers and can be ordered via https://www.cocart.net/courses .


Week 3:

As the webinar series continues, it might not be completely clear whether the course we just took is part of this webinar series. Nevertheless, given the research that was just presented, the course will appear for all current students of computer creativity who are interested in a more systematic approach to creativity evaluation. The topic of this webinar series is the computational style of improvisation. The style of improvisation is a method by which participants attempt to solve problems either in an improvised or a prerecorded condition. In this sense, it corresponds to the musical improvisation model and in practice it is often referred to as non-recursive playing, using non-con


-----
sample 3:
-----


I was asked to write this paper because a number of people wrote and asked for help with an aspect of creativity, creative inspiration. I was also asked to write and present it in a manner that was useful for an audience of academics. There is still much that the audience is unaware of when they are reading a paper and trying to understand one of these systems. I hope that it is of use for them at some level to understand that there is more to it than just "good and bad", and that is what a good system does best. What matters most is not how well the system is performing, but how well its creator is producing art.

The point of my article is to encourage people to think more about how it is possible to define artistic performance, or how it is possible to define something to be creative, as these aspects (art or creativity itself) are not always as clear-cut as people think they are.

I wrote an editorial piece about the talk entitled: Why creativity is not as clear cut as people think it is


Week 3:

Abstract In this lecture, I explored how computational creativity systems can be conceived as creative. I focused a lot on the definition of Creative, because the concept is so broad, and the concept itself is so important and controversial. At the end, because I was asked to present the talk at the conference, I did, without realising what I got myself into : I gave the talk in front of an audience of more than 100 people.

Despite my best efforts to keep as straight a story as possible, I made a lot of mistakes in narrating the talk. Here is one of the things I'm embarrassed about the most. I didn't tell my audience the exact reason I was presenting this kind of talk. I was actually worried that if I told people the exact reason, they would get confused, and that could have been a waste of time. I tried to keep the lecture on the relevant theme, but it was actually harder to do than I thought it would be.

The goal of the talk should be to illustrate to our audience of all different kinds of creativity systems, to draw inspiration to all kinds of things one could call creativity, and show those who are interested in this topic that most of the things that they think they do not know about creative systems are often not true. One of the most important goals of my talk is to draw people in, and educate them about the nature of creative systems and the nature of creativity,



-----
sample 4:
-----



A brief review of the empirical literature for judging creative systems, to give us some context if we feel we have any difficulty in judging the validity of the empirical literature. The main areas of research that are being explored include: the empirical methods used, the experimental protocol employed, the testing methods utilized and the experimental designs used. This paper does not claim to be an exhaustive or definitive reference, it is merely an interpretation of the empirical literature. I would stress the importance of reading the literature so that you do not have to rely on generalizations if you only want to understand the literature, rather than inventing specific experiments for your own purposes. I would say that it is important to note which aspects of the empirical literature are being considered and adopted or modified in the development of the SPECS methodology. This is in contrast with the previous paper in this set when I argued that the SPECS mechanism was simply a modified version of that which had been used previously. The current paper does not do a very good job at summarizing my previous proposal, I hope I have corrected some of my previous mistakes.

The third point of contention is whether or not the existing tools (informal methods, theory, etc.) of computational creativity can be used to judge creativity. I feel that the present literature on creativity is not as rich or as comprehensive as the literature of natural intelligence evaluation, and it is a challenge to make the scientific method of creativity evaluation useful. I will briefly briefly discuss a few of the challenges that come with that task.

(1) To get good insights in creativity, creativity has to be directly investigated and measured, not just evaluated by some theoretical or experimental approach. The two methods that I use for thinking about creativity (and thus assessing the value of my own work) are: (a) qualitative research, in which you are able to observe or record in detail a process, and (b) quantitative experiments, in which you collect information and perform testing on it to produce an answer to the question "who is creative?". This would be the case of my previous paper.

(2) If you want to evaluate the quality of your work you have two choices. One option is to test it against a "computational" creative system, and the other is to create a new system that is "computable" in the same sense. The difficulty of choosing between the two can be explained by the two main advantages of one system over the other. There are three main advantages of "computational" creativity systems




======================================== SAMPLE 1 ========================================



In a related field in my own work, I've developed methods and methods of assessing mathematical creativity to help assess how well a given algorithm for a computationally challenging task has succeeded at generating new and complex mathematical results. It is not just the algorithm itself that should be evaluated, but the algorithms' ability to deliver meaningful results based on previous algorithms, and on the underlying philosophy of how they are implemented. This paper provides an exploratory method for exploring how a computational system and its corresponding philosophy shape the mathematics which are produced from it.


Week 3:

This is the third lecture on this week's topic, Computational Creativity (CP) as judged based on its impact on computational systems.

CP is not the only type of creativity we are discussing, but to me it is a subset that is inextricably entwined with creativity. If I were to give a general rule of thumb, I might think a generalised creative process in a computer program can produce approximately two million different outcomes. For each of these outcomes, the system could create one of the resulting objects by iterating the mathematical procedure for producing it, and then creating its own results. The system's approach to creative output would then also include the underlying philosophy of the underlying mathematics behind the process. The same program might produce a different result based on different principles. That is to say, different software or libraries and configurations which follow different principles would produce different results.

But this doesn't tell the whole story. To demonstrate this point, we look at the case of a program that generates a single number from a string of letters and numbers. As a result, we are able to examine each of the outcomes of the program, as well as the underlying philosophy behind them. The program itself is not being evaluated directly and the outcome of that process can certainly be changed.


Since many different creative systems are implemented in many different computer environments, it is not just the mathematical result that is critical but also the underlying philosophy that determines the effectiveness of any particular creative activity or product. The philosophy in the underlying structure of the system influences its creativity by influencing other parts of the system. This leads us to argue that it is not sufficient to simply analyse the mathematics of a creative process itself if we are to assess the creative capabilities of a system. Rather, we need to assess whether it is in fact capable of generating creative outputs that are meaningful and that also incorporate principles that are fundamental to the underlying creative process. One approach to assessing this would be to use
======================================== SAMPLE 2 ========================================
__________________________________

Week 3:

On this lecture we discussed the potential value of creativity evaluation for computer-generated art. We also reviewed four systems in the field of creative computation: a system that generates mathematical discoveries (Euclidean Geometric Generator), a machine learning system (Caveat Mathematician and Deep Neural Network), a programmable musical instrument (Music Recorder), and a musical instrument synthesizer (Elements). We also explored the application of these systems to a wide range of tasks, such as writing musical compositions (Elements), learning musical skills (Caveat Mathematician) and predicting the quality and style of music (Music Recorder).


Thoughts after the lecture:

This talk presented and elaborated on a project I began two years ago, The New Art of Computational Art (http://math.umd.edu/research/art/ArtC/). My research interests include both artificial intelligence ("AI") and computational artistic systems, but also include a range of computer-generated arts as well as a small but growing number of human-generated systems such as music and computer-generated computer graphics. My work extends through to work in human-generated art systems, and is particularly driven by research with children, with special mention of children's music and its role in helping their development, and in teaching them to make their own works of art.

I have been invited to appear at the World Music Festival of Cambridge (http://www.worldmusicfestival.org/ ) to speak about my research. More about this here .

__________________________________

Week 4:

On this lecture we reviewed three systems in computational artistic system design (Computer Music) - and how they might be combined to create a new art form. We discussed how to combine these systems, and how they might be combined to create new art forms. We then discussed a new approach for applying the research to creative systems. We have developed a technique for creating machine-generated artwork using a computer using an evolutionary algorithm called a Random Forest for music. We also examined how algorithms can also play a role in the process of generating art. The key insight from this talk was that music can be made by "re-composing" music. Music can be generated by starting with a previously constructed piece, producing a new piece and then randomly selecting the piece to be composed of. Music can be composed of parts that have a specific relationship to the initial piece, and then can have that relationship to randomly selected
======================================== SAMPLE 3 ========================================



Using computer programming to solve problems is the most common form of creative problem solving. It is well developed for solving problems of engineering, where software is the ultimate agent of problem solvers. However, there are now numerous other approaches capable of generating creative problem-solving work including art, narrative non-fiction, music, writing or other social activities. Creative problem solving is often thought of as a natural phenomenon, something which can be observed in the natural world. However, creativity has more to do with social behaviour than the "natural" world. There are a number of mechanisms of social behaviour that have been found to be related to a lack of creativity, but there are also more subtle and not so obvious social mechanisms of engagement that are essential in supporting creativity.

This paper builds on this research and describes a method to objectively evaluate the creative capacities of different computational systems using scientific methods.<|endoftext|>Still loading...

A B C D E F G H I J K L M N O P Q R S T U V W X Y Z 1 NATIONAL ABSTRACT 2 F4NN 3 2150 start year Yes Development Points 4 No National Traits 5 No Army Development Civilian Development Trait 1 Expansionist Divine task! immortal mission! Let us tread fast and joyfully the open trail before us! Let every American heart open wide for patriotism to glow undimmed, and confide with religious faith in the sublime and prodigious [Manifest] destiny of his well-loved country. -William Gilpin 6 Army ATTACK 5 Commercial SECTOR 20 Adherence level Fanatical 7 Army DEFENSE 20 Industrial SECTOR 10 8 Army LOGISTICS 20 Agricultural SECTOR 35 100 9 NPC No Air Force Development Resource SECTOR 21 Trait 2 Agrarian For of all gainful professions, nothing is better, nothing more pleasing, nothing more delightful, nothing more delightful than agriculture. The man who eats alone will be happy; but the man who works together with others will be content. -Cicero 10 No Air Force ATTACK 20 Public INFRASTRUCTURE 17 110 Adherence level Moderate 11 Air Force DEFENSE 12 State BUREAUCRACY 10 12 Air Force LOGISTICS 18 People WELFARE 20 13 Navy Development Trait 3 Militarist Our hearts where they rocked our cradle; Our love where we spent our toil; And our faith, and our hope, and our honour; We pledge to our native soil. - Rudyard Kipling 14 Navy ATTACK 8 You
======================================== SAMPLE 4 ========================================

Creativity can be thought of as the ability to make an idea happen or a novel observation happen. A human, in turn, is a creative system that is able to observe, plan, implement, and evaluate the consequences of its action so that the end result may be better or more useful to the individual. A human is a system that produces the world, which by virtue of its structure defines the universe, and is able to design the world in the way it is and to predict the outcomes it will have. As the system grows older, it can learn and evolve. This is human-centered.

However, a complex computational system like a computer is incapable of making, nor is it able to observe, nor plan, nor evaluate. It is a computational system that cannot evolve.


Week 3: Introduction to the Structure of the Complex Compositional System

Intrinsically, computer programs are composed of two kinds of structure: a formal structure, which can be represented as a stream, which can be modified and refined by the programmer, and also a compositional structure, which is determined by the system using certain rules and is composed of a certain number of discrete elements (the core of the system). This paper examines the structure of a simple musical composition and explores the process by which this musical structure is altered, as well as its effect on the compositional and compositional process. We use a simple musical piece, which consists completely of a string trio and bass. The composition comprises of the composition of individual chords (chords, triads, etc.), as well as the combination of a number of chord elements together, called a tonic (tone number 0, 1, 2, etc.). To make sense of the music, we will first look at a very simple notion of composition that is useful for understanding how a computer program (and any musical composition) is made, and secondly look at the rules that are used in order to accomplish the goals of the composition in the musical work.

What is Compositional Structure?

A simple definition by Dr. Douglas R. Eller has already been established: "The structural basis for the operation of a computer program (the structure of the code) is based on a set of instructions (instruction sets). The main structure of a program (the fundamental structure) consists of a sequence or sequence of instructions in one of the two basic programming languages, C and BASIC".

The instruction set can have any number of elements. The only constant, of course
======================================== SAMPLE 5 ========================================

The SPECS is a step-by-step approach to defining a system's creativity. The criteria for being a creative system are defined through this STEP. The criteria are: The system can generate a 'mood' (defined as a specific change in the behaviour of the system through an action) The system can construct a 'work of art' (an artistic work performed on a computer) The system can be made available (i.e. have the source code available) These criteria are very general in nature, as the SPECS considers the characteristics to be general or specific in application, and are meant to help in the selection process. In addition, the SPECS also uses a number of tools and tests to ensure the system meets or exceeds the stated criteria. This is done to ensure that the SPECS is fair and does not include arbitrary criteria. The SPECS was born of a workshop I participated in in a conference on creative systems, in which I articulated a few of the common elements for creating a system which may qualify as creative system, and offered a number of tools and tests to support the definition. The workshop resulted in a number of examples of such creative systems, and as such, I have thought about the SPECS using examples I developed, and also in a more practical way, by looking at the works of others in this area, and by reading through the literature about creative systems.

Week 3:

The paper reviews recent work in this area. The latest work in the area is by John C. Baez and Eric M. Stenner in their paper in Computational Creativity: An Evolutionary Approach , and by Chris M. Cairns and Steven B. Ritchie in their paper "Picking the Creative Systems" , both in Computer Entertainment Intelligence. These two papers present a new set of ideas designed to measure the computational creativity of software using a system which can create musical compositions on the computer. Both papers use a system based on a new class of tools, inspired by the Darwinian concept of selection and mutation. Both papers suggest three questions: How do software systems select their creative materials? What are the characteristics of artistic output produced by systems? What does it mean to determine what makes a system artistic?

The paper provides many examples of artistic software systems that have been identified by both artists and engineers, which the authors say are all of significant artistic value and have demonstrated the creative qualities described here. The authors then discuss, among other things, the differences between the art-makers who