======================================== Model text ========================================
Week 1:
We add to the discussion of how to assess the creativity of programs which generate artefacts such as poems, theorems, paintings, melodies, etc. To do so, we first review some existing frameworks for assessing artefact generation programs. Then, drawing on our experience of building both a mathematical discovery system and an automated painter, we argue that it is not appropriate to base the assessment of a system on its output alone, and that the way it produces artefacts also needs to be taken into account. We suggest a simple framework within which the behavior of a program can be categorized and described which may add to the perception of creativity in the system.

Thoughts after the lecture:

On this lecture we discussed the creative tripod that is comprised of three requirements of creativity and three parties that can have these properties: appreciation, skill, imagination; programmer, computer, consumer.
In my initial definition of creativity, by purposefulness I meant somewhat similar properties that in the tripod are called appreciation. 
The tripod is more human-centric and narrower than my own definition. Evolution of species by natural selection does not comfortably qualify as creative by the standards of the tripod, but to me it seems the most self-evidently creative process, because it has created the most complex and meaningful products we know of.



Week 2:
Abstract Computational creativity is a flourishing research area, with a variety of creative systems being produced and developed. Creativity evaluation has not kept pace with system development with an evident lack of systematic evaluation of the creativity of these systems in the literature. This is partially due to difficulties in defining what it means for a computer to be creative; indeed, there is no consensus on this for human creativity, let alone its computational equivalent. This paper proposes a Standardized Procedure for Evaluating Creative Systems (SPECS). SPECS is a three-step process: stating what it means for a particular computational system to be creative, deriving and performing tests based on these statements. To assist this process, the paper offers a collection of key components of creativity, identified empirically from discussions of human and computational creativity. Using this approach, the SPECS methodology is demonstrated through a comparative case study evaluating computational creativity systems that improvise music.

Thoughts after the lecture:

======================================================================================================================== SAMPLE 1 ========================================

The first step of the SPECS procedure consists in defining how much the system has already been created, and for how long, using the computer to construct a set of mathematical models. The computer has been used by many researchers to construct all kinds of scientific datasets, and has many kinds of computational tools that allow it to produce information regarding the natural world. This approach is the first step to a better understanding of creativity and its functions and its potential uses in a computational environment. It appears not to have been sufficiently explored by the early researchers of creativity, which are the non-professional programmers and technicians of our research center. So a detailed definition is necessary to show that these functions could potentially be used to create computer creations and other forms of computer creativity. The second step is by describing the types of creativity that might be possible in an independent experimental environment. Finally, the scientific literature is not yet well understood, in any case, about the computational creativity, although the term creativity in scientific disciplines is often used for the same principles described on the BASIC model.


The three parts of SPECS are shown in Figure 1. While most systems could be described as an interactive model, these systems represent some of the most complex forms of creativity. When presented with the three parts of the SPECS procedure, we show that computer systems are not just computational devices for creativity, but also non-linear or non-coefficient, such as an electric system which simply is not computationally useful. For example, the simplest type of computational creativity is not simply creative creativity, but also non-linear or non-coefficient creativity, which is just non-linear or non-coefficient without being expressive of any particular type.

What was once the case for creative inspiration has become a common tool for generating computer models with new information about the properties of the underlying system, and the model may simply take as input a set of values such as an electron or a photon that can be drawn upon the computer as an illustration. To illustrate such potential, let's consider a complex computer system with an energy capacity of 40 g. A computer model of a system consists of three different components, each with a set of mathematical functions and a set of dimensions. This model is shown in Fig. 1. This is, let us say, an example scenario in which the system is created from a set of mathematical equations which specify the dimensions, while at the same time, in a mathematical simulation. The initial calculations are just one step away. The model then has to be compared to

======================================== SAMPLE 2 ========================================

The first step of design, as far as what makes a human invention unique, is to develop an initial, systematic evaluation of that innovation. The second steps of evaluation, where an individual invention makes or has a chance to make use of, is also important. This step is called a formal approach. The third step of evaluation, takes into consideration the first and second steps of design and is described in the paper. The fourth step is known as an inductively derived and generalized method for evaluation. These are generally referred to as the 'faceted methods of evaluation'.

The following section presents a description of SPECS. We will begin by presenting the various ways of evaluating software at their inception, and then give an overview of some of the most useful, successful and common design decisions that we make. We will look first at individual inventions that have given birth to creativity; then, a discussion of the various approaches for selecting the best design for them, how these are evaluated and selected for evaluation in the software development process; and finally, what is meant (and can be achieved) by these different approaches.

Structure. A good programmer should aim for a structure which is modular in composition and which is suited to individual needs. The more of such a structure, the better it is for the project. One of the most important characteristics of the programmer is his understanding that software is the means by which he solves problems in a relatively efficient manner. (A "simple programming language" is an effective program which can be programmed using the programming language of a simple language.) The programmer should design and develop a structure which should reflect the basic nature of human intelligence: the capability to take advantage of any available means of communication, to build, configure and manage the program, and to use them at their natural speed in order to produce or maintain a certain level of output (and an efficient number of values). The structure should be designed to allow the programmer (or "programmer") to solve problems of varying complexity and complexity, thereby reducing costs and increasing success. The structure should be designed to ensure that any user experience is the greatest, most beneficial one.

This approach differs from the more common formal approaches in that the programmer must be able to evaluate the program in a manner that will enable them to understand the application from a particular point of view and to provide a solution for specific needs. The programmer must be able to work only at the maximum of its power and do all the work with little or no interference. The programmer must give his or

================================================================================